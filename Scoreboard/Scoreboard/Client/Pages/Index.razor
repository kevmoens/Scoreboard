@page "/"
@using Microsoft.AspNetCore.SignalR.Client
@using Microsoft.Extensions.Configuration
@inject IConfiguration Configuration

<PageTitle>Scoreboard Home</PageTitle>
<style>
body {
    background-color: black;
    color: white;
}
label {
    color: white;
}
.mud-input-label-inputcontrol {
    color: white;
    --mud-palette-text-secondary: white;
}
</style>
    <div style="font-size: 18vw;">
<MudGrid>
    
    <MudItem xs="6" >
        @if (@away == null)
        {
            <label>Away</label>
        } else
        {
            <img src='/Helmets/@(away.ImageNum).png'>
        }        
        @away?.Score
        </MudItem>
    <MudItem xs="6" >
        @if (@home == null)
        {
            <label>Home</label>
        } else
        {
            <img src='/Helmets/@(home.ImageNum).png'>
        }
        @home?.Score
        </MudItem>
</MudGrid>
    </div>

<MudGrid>
    <MudItem xs="6" >
        <MudSelect T="string" Label="Away" AnchorOrigin="Origin.BottomCenter" Value="awayName" ValueChanged="AwayChanged"  AdornmentColor="Color.Secondary">
            @foreach (var team in teams.Keys)
            {
                <MudSelectItem T="string" Value="@team">@team</MudSelectItem>
            }
        </MudSelect>
    </MudItem>
    <MudItem xs="6" >
        <MudSelect T="string" Label="Home" AnchorOrigin="Origin.BottomCenter" Value="homeName" ValueChanged="HomeChanged">
            @foreach (var team in teams.Keys)
            {
                <MudSelectItem T="string" Value="@team">@team</MudSelectItem>
            }
        </MudSelect>
    </MudItem>
</MudGrid>

<MudButton OnClick="@(() => ToggleButtons())" Variant="Variant.Filled" Color="Color.Secondary">...</MudButton>
@if (!hideButtons)
{
    <MudGrid>    
        <MudItem xs="6" >
            <MudButton OnClick="@(() => AwayScore(3))" Variant="Variant.Filled" Color="Color.Secondary">Field Goal</MudButton>
            <MudButton OnClick="@(() => AwayScore(6))" Variant="Variant.Filled" Color="Color.Secondary">Touchdown</MudButton>
            <MudButton OnClick="@(() => AwayScore(1))" Variant="Variant.Filled" Color="Color.Secondary">Extra Point</MudButton>
            <MudButton OnClick="@(() => AwayScore(2))" Variant="Variant.Filled" Color="Color.Secondary">Safety/Two Point Conversion</MudButton>
        </MudItem>
        <MudItem xs="6" >
            <MudButton OnClick="@(() => HomeScore(3))" Variant="Variant.Filled" Color="Color.Primary">Field Goal</MudButton>
            <MudButton OnClick="@(() => HomeScore(6))" Variant="Variant.Filled" Color="Color.Primary">Touchdown</MudButton>
            <MudButton OnClick="@(() => HomeScore(1))" Variant="Variant.Filled" Color="Color.Primary">Extra Point</MudButton>
            <MudButton OnClick="@(() => HomeScore(2))" Variant="Variant.Filled" Color="Color.Primary">Safety/Two Point Conversion</MudButton>
        </MudItem>
    </MudGrid>
    <hr>
    <ul id="messagesList">
        @foreach (var message in messages)
        {
            <li>@message</li>
        }
    </ul>
}

@code {
    private HubConnection? hubConnection;
    private List<string> messages = new List<string>();
    private string? awayName;
    private string? homeName;
    private Team? home = null;
    private Team? away = null;
    private Teams teams = new Teams();
    private bool hideButtons = true;
    protected override async Task OnInitializedAsync()
    {
        try
        {

            hubConnection = new HubConnectionBuilder()
                    .WithUrl(Configuration["serverUrl"])
                    .Build();

            hubConnection.On<string, string>("ScoreUpdate", (home, away) =>
            {
                if (this.home == null || this.away == null) return;
                int homeScore, awayScore;
                int.TryParse(home, out homeScore);
                int.TryParse(away, out awayScore);
                this.home.Score = homeScore;
                this.away.Score = awayScore;
                var encodedMsg = $"Home {home}: Away {away}";
                messages.Add(encodedMsg);
                StateHasChanged();
            });

            hubConnection.On<string>("HomeUpdate", (homeName) =>
            {
                this.homeName = homeName;
                if (!string.IsNullOrEmpty(homeName))
                {
                    home = teams[homeName];
                }
                StateHasChanged();
            });
            hubConnection.On<string>("AwayUpdate", (awayName) =>
            {
                this.awayName = awayName;
                if (!string.IsNullOrEmpty(awayName))
                {
                    away = teams[awayName];
                }
                StateHasChanged();
            });

            await hubConnection.StartAsync();
        } catch {}
    }
    public async Task AwayChanged(string awayName)
    {
        this.awayName = awayName;
        if (!string.IsNullOrEmpty(awayName))
        {
            away = teams[awayName];
            if (hubConnection is not null)
            {
                await hubConnection.SendAsync("AwayUpdate", awayName);
            }
            StateHasChanged();
        }
    }
    public async Task HomeChanged(string homeName)
    {
        this.homeName = homeName;
        if (!string.IsNullOrEmpty(homeName))
        {
            home = teams[homeName];            
            if (hubConnection is not null)
            {
                await hubConnection.SendAsync("HomeUpdate", homeName);
            }
            StateHasChanged();
        }
    }
    private async Task Send()
    {
        if (hubConnection is not null)
        {
            await hubConnection.SendAsync("ScoreUpdate", home?.Score.ToString(), away?.Score.ToString());
        }
    }
    private async Task AwayScore(int points)
    {
        if (away == null) return;
        away.Score += points;
        await Send();
    }
    private async Task HomeScore(int points)
    {
        if (home == null) return;
        home.Score += points;
        await Send();
    }
    public bool IsConnected =>
        hubConnection?.State == HubConnectionState.Connected;

    public void ToggleButtons()
    {
        hideButtons = !hideButtons;
        StateHasChanged();
    }
    public async ValueTask DisposeAsync()
    {
        if (hubConnection is not null)
        {
            await hubConnection.DisposeAsync();
        }
    }
}
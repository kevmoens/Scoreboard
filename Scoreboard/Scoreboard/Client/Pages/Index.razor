@page "/"
@using Microsoft.AspNetCore.SignalR.Client
@using Microsoft.Extensions.Configuration
@using Scoreboard.Core
@using System.ComponentModel
@inject IConfiguration Configuration
@inject MainViewModel model

<PageTitle>Scoreboard Home</PageTitle>
<style>
body {
    background-color: black;
    /* background-image: url('https://gopackgo.s3.us-east-2.amazonaws.com/MR.jpg'); */
    background-repeat: no-repeat;
  background-attachment: fixed;
  background-size: cover;
    color: white;
}
label {
    color: white;
}
.mud-input-label-inputcontrol {
    color: white;
    --mud-palette-text-secondary: white;
}
</style>
    <div style="font-size: 18vw;">
<MudGrid>
    
    <MudItem xs="6" >
        @if (@model.away == null)
        {
            <label>Away</label>
        } else
        {
            <img src='/Helmets/@(model.away.ImageNum).png'>
        }        
        @model.away?.Score
        </MudItem>
    <MudItem xs="6" >
        @if (@model.home == null)
        {
            <label>Home</label>
        } else
        {
            <img src='/Helmets/@(model.home.ImageNum).png'>
        }
        @model.home?.Score
        </MudItem>
</MudGrid>
    </div>

<MudGrid>
    <MudItem xs="6" >
        <MudSelect T="string" Label="Away" AnchorOrigin="Origin.BottomCenter" Value="model.awayName" ValueChanged="model.AwayChanged"  AdornmentColor="Color.Secondary">
            @foreach (var team in model.teams.Keys)
            {
                <MudSelectItem T="string" Value="@team">@team</MudSelectItem>
            }
        </MudSelect>
    </MudItem>
    <MudItem xs="6" >
        <MudSelect T="string" Label="Home" AnchorOrigin="Origin.BottomCenter" Value="model.homeName" ValueChanged="model.HomeChanged">
            @foreach (var team in model.teams.Keys)
            {
                <MudSelectItem T="string" Value="team">@team</MudSelectItem>
            }
        </MudSelect>
    </MudItem>
</MudGrid>

<MudButton OnClick="@(() => model.ToggleButtons())" Variant="Variant.Filled" Color="Color.Dark">...</MudButton>
@if (!model.hideButtons)
{
    <MudGrid>    
        <MudItem xs="6" >
            <MudButton OnClick="@(() => model.AwayScore(3))" Variant="Variant.Filled" Color="Color.Secondary">Field Goal</MudButton>
            <MudButton OnClick="@(() => model.AwayScore(6))" Variant="Variant.Filled" Color="Color.Secondary">Touchdown</MudButton>
            <MudButton OnClick="@(() => model.AwayScore(1))" Variant="Variant.Filled" Color="Color.Secondary">Extra Point</MudButton>
            <MudButton OnClick="@(() => model.AwayScore(2))" Variant="Variant.Filled" Color="Color.Secondary">Safety/Two Point Conversion</MudButton>
        </MudItem>
        <MudItem xs="6" >
            <MudButton OnClick="@(() => model.HomeScore(3))" Variant="Variant.Filled" Color="Color.Primary">Field Goal</MudButton>
            <MudButton OnClick="@(() => model.HomeScore(6))" Variant="Variant.Filled" Color="Color.Primary">Touchdown</MudButton>
            <MudButton OnClick="@(() => model.HomeScore(1))" Variant="Variant.Filled" Color="Color.Primary">Extra Point</MudButton>
            <MudButton OnClick="@(() => model.HomeScore(2))" Variant="Variant.Filled" Color="Color.Primary">Safety/Two Point Conversion</MudButton>
        </MudItem>
    </MudGrid>
    <hr>
    <ul id="messagesList">
        @foreach (var message in model.messages)
        {
            <li>@message</li>
        }
    </ul>
}

@code {
    protected override async Task OnInitializedAsync()
    {
        string accessToken = Configuration["accessToken"];
        string serverUrl = Configuration["serverUrl"];
        await model.Initialize(accessToken, serverUrl);
        model.PropertyChanged += model_PropertyChanged;
    }
    public async ValueTask DisposeAsync()
    {
        model.PropertyChanged -= model_PropertyChanged;
        await model.DisposeAsync();
    }
    public void model_PropertyChanged(object? sender, PropertyChangedEventArgs? e)
    {
        StateHasChanged();

    }
}